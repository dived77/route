{"version":3,"sources":["../app.js"],"names":["module","exports","app","config","debug","coreMiddleware","unshift","localHandler","ctx","username","password","getUser","indexOf","service","user","getUserByMail","getUserByLoginName","existUser","passhash","pass","equal","helper","bcompare","active","githubHandler","profile","email","emails","value","getUserByGithubId","id","model","User","githubId","loginname","avatar","_json","avatar_url","githubUsername","githubAccessToken","accessToken","save","message","err","Error","code","passport","verify","logger","handler","provider","auth_token","_id","opts","path","maxAge","signed","httpOnly","cookies","set","auth_cookie_name","deserializeUser","get","auth","split","user_id","getUserById","admins","hasOwnProperty","is_admin"],"mappings":"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","file":"app.js","sourcesContent":["\nmodule.exports = app => {\n    if (app.config.debug) {\n        app.config.coreMiddleware.unshift('less');\n    }\n\n    const localHandler = async (ctx, { username, password }) => {\n        const getUser = username => {\n            if (username.indexOf('@') > 0) {\n                return ctx.service.user.getUserByMail(username);\n            }\n            return ctx.service.user.getUserByLoginName(username);\n        };\n        const existUser = await getUser(username);\n\n        // 用户不存在\n        if (!existUser) {\n            return null;\n        }\n\n        const passhash = existUser.pass;\n        // TODO: change to async compare\n        const equal = ctx.helper.bcompare(password, passhash);\n        // 密码不匹配\n        if (!equal) {\n            return null;\n        }\n\n        // 用户未激活\n        if (!existUser.active) {\n            // 发送激活邮件\n            return null;\n        }\n\n        // 验证通过\n        return existUser;\n    };\n\n    const githubHandler = async (ctx, { profile }) => {\n        const email = profile.emails && profile.emails[0] && profile.emails[0].value;\n        let existUser = await ctx.service.user.getUserByGithubId(profile.id);\n\n        // 用户不存在则创建\n        if (!existUser) {\n            existUser = new ctx.model.User();\n            existUser.githubId = profile.id;\n            existUser.active = true;\n        }\n\n        // 用户存在，更新字段\n        existUser.loginname = profile.username;\n        existUser.email = email || existUser.email;\n        existUser.avatar = profile._json.avatar_url;\n        existUser.githubUsername = profile.username;\n        existUser.githubAccessToken = profile.accessToken;\n\n        try {\n            await existUser.save();\n        } catch (ex) {\n            if (ex.message.indexOf('duplicate key error') !== -1) {\n                let err;\n                if (ex.message.indexOf('email') !== -1) {\n                    err = new Error('您 GitHub 账号的 Email 与之前在 CNodejs 注册的用户名重复了');\n                    err.code = 'duplicate_email';\n                    throw err;\n                }\n\n                if (ex.message.indexOf('loginname') !== -1) {\n                    err = new Error('您 GitHub 账号的用户名与之前在 CNodejs 注册的用户名重复了');\n                    err.code = 'duplicate_loginname';\n                    throw err;\n                }\n            }\n            throw ex;\n        }\n\n        return existUser;\n    };\n\n    app.passport.verify(async (ctx, user) => {\n        ctx.logger.debug('passport.verify', user);\n        const handler = user.provider === 'github' ? githubHandler : localHandler;\n        const existUser = await handler(ctx, user);\n        if (existUser) {\n            // id存入Cookie, 用于验证过期.\n            const auth_token = existUser._id + '$$$$'; // 以后可能会存储更多信息，用 $$$$ 来分隔\n            const opts = {\n                path: '/',\n                maxAge: 1000 * 60 * 60 * 24 * 30,\n                signed: true,\n                httpOnly: true\n            };\n            ctx.cookies.set(app.config.auth_cookie_name, auth_token, opts); // cookie 有效期30天\n        }\n\n        return existUser;\n    });\n\n    app.passport.deserializeUser(async (ctx, user) => {\n        if (user) {\n            const auth_token = ctx.cookies.get(ctx.app.config.auth_cookie_name, {\n                signed: true\n            });\n\n            if (!auth_token) {\n                return user;\n            }\n\n            const auth = auth_token.split('$$$$');\n            const user_id = auth[0];\n            user = await ctx.service.user.getUserById(user_id);\n\n            if (!user) {\n                return user;\n            }\n\n            if (ctx.app.config.admins.hasOwnProperty(user.loginname)) {\n                user.is_admin = true;\n            }\n        }\n\n        return user;\n    });\n};\n"]}