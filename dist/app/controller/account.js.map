{"version":3,"sources":["../../../app/controller/account.js"],"names":["_","require","validator","utility","uuid","module","exports","AccountController","ctx","service","config","email","trim","request","body","toLowerCase","password","captcha","String","console","log","ret","status","message","data","msg","some","item","isEmail","length","account","getUsersByQuery","$or","accounts","passhash","helper","bhash","newAndSave","result","mail","sendActiveMail","md5","session_secret","getUser","indexOf","user","getUserByMail","existUser","pass","equal","bcompare","token","app","jwt","sign","secret","save","old_password","Controller"],"mappings":";;;;;;;;;;;;AACA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,YAAYD,QAAQ,WAAR,CAAlB;AACA,IAAME,UAAUF,QAAQ,SAAR,CAAhB;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;;AAEAI,OAAOC,OAAP,GAAiB,eAAO;AAAA,QACdC,iBADc;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIJC,uCAJI,GAIqB,IAJrB,CAIJA,GAJI,EAICC,OAJD,GAIqB,IAJrB,CAICA,OAJD,EAIUC,MAJV,GAIqB,IAJrB,CAIUA,MAJV;AAONC,yCAPM,GAOET,UAAUU,IAAV,CAAeJ,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBH,KAAjB,IAA0B,EAAzC,EAA6CI,WAA7C,EAPF;AAQNC,4CARM,GAQKd,UAAUU,IAAV,CAAeJ,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBE,QAAjB,IAA6B,EAA5C,CARL;AASNC,2CATM,GASIf,UAAUU,IAAV,CAAeM,OAAOV,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBG,OAAxB,KAAoC,EAAnD,CATJ;;;AAWZE,4CAAQC,GAAR,CAAYZ,IAAIK,OAAJ,CAAYC,IAAxB;AACMO,uCAZM,GAYA;AACRC,gDAAQ,GADA;AAERC,iDAAS,EAFD;AAGRC,8CAAM;AAHE,qCAZA;AAiBRC,uCAjBQ,GAiBF,IAjBE;AAkBZ;;AACA,wCAAI,CAACd,KAAD,EAAQK,QAAR,EAAkBC,OAAlB,EAA2BS,IAA3B,CAAgC,gBAAQ;AACxC,+CAAOC,SAAS,EAAhB;AACH,qCAFG,CAAJ,EAEI;AACAF,8CAAM,QAAN;AACH,qCAJD,MAIO,IAAI,CAACvB,UAAU0B,OAAV,CAAkBjB,KAAlB,CAAL,EAA+B;AAClCc,8CAAM,QAAN;AACH,qCAFM,MAEA,IAAIT,SAASa,MAAT,GAAkB,CAAtB,EAAyB;AAC5BJ,8CAAM,UAAN;AACH;AACD;;AA5BY,0CA8BRA,OAAO,IA9BC;AAAA;AAAA;AAAA;;AA+BRjB,wCAAIc,MAAJ,GAAa,GAAb;AACAD,wCAAIE,OAAJ,GAAcE,GAAd;AACAjB,wCAAIM,IAAJ,GAAWO,GAAX;AAjCQ;;AAAA;AAAA;AAAA,2CAuCWZ,QAAQqB,OAAR,CAAgBC,eAAhB,CAAgC;AACnDC,6CAAK,CACD,EAAErB,YAAF,EADC;AAD8C,qCAAhC,EAIpB,EAJoB,CAvCX;;AAAA;AAuCNsB,4CAvCM;;AAAA,0CA6CRA,SAASJ,MAAT,GAAkB,CA7CV;AAAA;AAAA;AAAA;;AA8CRrB,wCAAIc,MAAJ,GAAa,GAAb;AACAD,wCAAIE,OAAJ,GAAc,aAAd;AACAf,wCAAIM,IAAJ,GAAWO,GAAX;AAhDQ;;AAAA;AAoDNa,4CApDM,GAoDK1B,IAAI2B,MAAJ,CAAWC,KAAX,CAAiBpB,QAAjB,CApDL;AAAA;AAAA,2CAuDOP,QAAQqB,OAAR,CAAgBO,UAAhB,CAA2B1B,KAA3B,EAAkCuB,QAAlC,EAA4C,KAA5C,CAvDP;;AAAA;AAuDRI,0CAvDQ;;;AAyDZnB,4CAAQC,GAAR,CAAYkB,MAAZ;AACA;AA1DY;AAAA,2CA2DN7B,QAAQ8B,IAAR,CAAaC,cAAb,CAA4B7B,KAA5B,EAAmCR,QAAQsC,GAAR,CAAY9B,QAAQuB,QAAR,GAAmBxB,OAAOgC,cAAtC,CAAnC,CA3DM;;AAAA;AA4DZrB,wCAAIC,MAAJ,GAAa,GAAb;AACAd,wCAAIM,IAAJ,GAAWO,GAAX;;AA7DY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkEJb,uCAlEI,GAkEqB,IAlErB,CAkEJA,GAlEI,EAkECC,OAlED,GAkEqB,IAlErB,CAkECA,OAlED,EAkEUC,MAlEV,GAkEqB,IAlErB,CAkEUA,MAlEV;AAqENC,yCArEM,GAqEET,UAAUU,IAAV,CAAeJ,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBH,KAAjB,IAA0B,EAAzC,EAA6CI,WAA7C,EArEF;AAsENC,4CAtEM,GAsEKd,UAAUU,IAAV,CAAeJ,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBE,QAAjB,IAA6B,EAA5C,CAtEL;AAuEZ;;AAEAG,4CAAQC,GAAR,CAAYZ,IAAIK,OAAJ,CAAYC,IAAxB;AACMO,uCA1EM,GA0EA;AACRC,gDAAQ,GADA;AAERC,iDAAS,EAFD;AAGRC,8CAAM;AAHE,qCA1EA;AA+ERC,uCA/EQ,GA+EF,IA/EE;AAgFZ;;AACA,wCAAI,CAACd,KAAD,EAAQK,QAAR,EAAkBU,IAAlB,CAAuB,gBAAQ;AAC/B,+CAAOC,SAAS,EAAhB;AACH,qCAFG,CAAJ,EAEI;AACAF,8CAAM,QAAN;AACH,qCAJD,MAIO,IAAI,CAACvB,UAAU0B,OAAV,CAAkBjB,KAAlB,CAAL,EAA+B;AAClCc,8CAAM,QAAN;AACH,qCAFM,MAEA,IAAIT,SAASa,MAAT,GAAkB,CAAtB,EAAyB;AAC5BJ,8CAAM,UAAN;AACH;;AAEKkB,2CA3FM,GA2FI,SAAVA,OAAU,QAAS;AACrB,4CAAIhC,MAAMiC,OAAN,CAAc,GAAd,IAAqB,CAAzB,EAA4B;AACxB,mDAAOpC,IAAIC,OAAJ,CAAYoC,IAAZ,CAAiBC,aAAjB,CAA+BnC,KAA/B,CAAP;AACH;AACD,+CAAO,KAAP;AACH,qCAhGW;;AAAA;AAAA,2CAiGYgC,QAAQhC,KAAR,CAjGZ;;AAAA;AAiGNoC,6CAjGM;;AAAA,wCAoGPA,SApGO;AAAA;AAAA;AAAA;;AAqGRvC,wCAAIc,MAAJ,GAAa,GAAb;AACAD,wCAAIE,OAAJ,GAAc,OAAd;AACAf,wCAAIM,IAAJ,GAAWO,GAAX;AAvGQ;;AAAA;AA2GNa,4CA3GM,GA2GKa,UAAUC,IA3Gf;AA4GZ;;AACMC,yCA7GM,GA6GEzC,IAAI2B,MAAJ,CAAWe,QAAX,CAAoBlC,QAApB,EAA8BkB,QAA9B,CA7GF;AA8GZ;;AA9GY,wCA+GPe,KA/GO;AAAA;AAAA;AAAA;;AAgHRzC,wCAAIc,MAAJ,GAAa,GAAb;AACAD,wCAAIE,OAAJ,GAAc,OAAd;AACAf,wCAAIM,IAAJ,GAAWO,GAAX;AAlHQ;;AAAA;AAsHN8B,yCAtHM,GAsHEC,IAAIC,GAAJ,CAAQC,IAAR,CAAa,EAAE3C,OAAOoC,UAAUpC,KAAnB,EAAb,EAAyCyC,IAAI1C,MAAJ,CAAW2C,GAAX,CAAeE,MAAxD,CAtHF;;;AAyHZlC,wCAAIC,MAAJ,GAAa,GAAb;AACAD,wCAAIG,IAAJ,CAAS2B,KAAT,GAAiBA,KAAjB;AACA3C,wCAAIM,IAAJ,GAAWO,GAAX;;AA3HY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgIJb,uCAhII,GAgII,IAhIJ,CAgIJA,GAhII;;;AAkIZW,4CAAQC,GAAR,CAAYZ,IAAIsB,OAAhB;;AAEA,yCAAKtB,GAAL,CAASM,IAAT,GAAgBN,IAAIqC,IAApB;;AApIY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0IJrC,uCA1II,GA0Ia,IA1Ib,CA0IJA,GA1II,EA0ICC,OA1ID,GA0Ia,IA1Ib,CA0ICA,OA1ID;AA2INY,uCA3IM,GA2IA;AACRC,gDAAQ,GADA;AAERC,iDAAS,EAFD;AAGRC,8CAAM;AAHE,qCA3IA;AAgJNb,yCAhJM,GAgJET,UAAUU,IAAV,CAAeJ,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBH,KAAhC,EAAuCI,WAAvC,EAhJF;AAiJNC,4CAjJM,GAiJKd,UAAUU,IAAV,CAAeJ,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBE,QAAhC,KAA6C,EAjJlD;;AAAA,wCAmJPd,UAAU0B,OAAV,CAAkBjB,KAAlB,CAnJO;AAAA;AAAA;AAAA;;AAqJRU,wCAAIE,OAAJ,GAAc,OAAd;AACAf,wCAAIM,IAAJ,GAAWO,GAAX;AAtJQ;;AAAA;AAAA;AAAA,2CA0JOZ,QAAQoC,IAAR,CAAaC,aAAb,CAA2BnC,KAA3B,CA1JP;;AAAA;AA0JNkC,wCA1JM;;AAAA,wCA2JPA,IA3JO;AAAA;AAAA;AAAA;;AA4JRxB,wCAAIE,OAAJ,GAAc,OAAd;AACAf,wCAAIM,IAAJ,GAAWO,GAAX;AA7JQ;;AAAA;AAkKNa,4CAlKM,GAkKK1B,IAAI2B,MAAJ,CAAWC,KAAX,CAAiBpB,QAAjB,CAlKL;;AAmKZ6B,yCAAKG,IAAL,GAAYd,QAAZ;AAnKY;AAAA,2CAoKNW,KAAKW,IAAL,EApKM;;AAAA;AAqKZhD,wCAAIc,MAAJ,GAAa,GAAb;AACAD,wCAAIC,MAAJ,GAAa,GAAb;AACAd,wCAAIM,IAAJ,GAAWO,GAAX;;AAvKY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0KhB;;AA1KgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4KJb,uCA5KI,GA4Ka,IA5Kb,CA4KJA,GA5KI,EA4KCC,OA5KD,GA4Ka,IA5Kb,CA4KCA,OA5KD;AA6KNY,uCA7KM,GA6KA;AACRC,gDAAQ,GADA;AAERC,iDAAS,EAFD;AAGRC,8CAAM;AAHE,qCA7KA;AAkLNiC,gDAlLM,GAkLSvD,UAAUU,IAAV,CAAeJ,IAAIK,OAAJ,CAAYC,IAAZ,CAAiB2C,YAAhC,KAAiD,EAlL1D;AAmLNzC,4CAnLM,GAmLKd,UAAUU,IAAV,CAAeJ,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBE,QAAhC,KAA6C,EAnLlD;AAAA;AAAA,2CAqLOP,QAAQqB,OAAR,CAAgBgB,aAAhB,CAA8BtC,IAAIsB,OAAJ,CAAYnB,KAA1C,CArLP;;AAAA;AAqLNkC,wCArLM;;AAAA,wCAuLPA,IAvLO;AAAA;AAAA;AAAA;;AAwLRxB,wCAAIE,OAAJ,GAAc,OAAd;AACAf,wCAAIM,IAAJ,GAAWO,GAAX;AAzLQ;;AAAA;AA6LN4B,yCA7LM,GA6LEzC,IAAI2B,MAAJ,CAAWe,QAAX,CAAoBO,YAApB,EAAkCZ,KAAKG,IAAvC,CA7LF;AA8LZ;;AA9LY,wCA+LPC,KA/LO;AAAA;AAAA;AAAA;;AAgMRzC,wCAAIc,MAAJ,GAAa,GAAb;AACAD,wCAAIE,OAAJ,GAAc,QAAd;AACAf,wCAAIM,IAAJ,GAAWO,GAAX;AAlMQ;;AAAA;AAsMNa,4CAtMM,GAsMK1B,IAAI2B,MAAJ,CAAWC,KAAX,CAAiBpB,QAAjB,CAtML;;AAuMZ6B,yCAAKG,IAAL,GAAYd,QAAZ;;AAvMY;AAAA,2CAyMNW,KAAKW,IAAL,EAzMM;;AAAA;AA0MZhD,wCAAIc,MAAJ,GAAa,GAAb;AACAD,wCAAIC,MAAJ,GAAa,GAAb;AACAd,wCAAIM,IAAJ,GAAWO,GAAX;;AA5MY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MACY+B,IAAIM,UADhB;;AAiNpB,WAAOnD,iBAAP;AACH,CAlND","file":"account.js","sourcesContent":["\nconst _ = require('lodash');\nconst validator = require('validator');\nconst utility = require('utility');\nconst uuid = require('uuid');\n\nmodule.exports = app => {\n    class AccountController extends app.Controller {\n\n        async register() {\n            const { ctx, service, config } = this;\n\n\n            const email = validator.trim(ctx.request.body.email || '').toLowerCase();\n            const password = validator.trim(ctx.request.body.password || '');\n            const captcha = validator.trim(String(ctx.request.body.captcha) || '');\n\n            console.log(ctx.request.body);\n            const ret = {\n                status: 422,\n                message: '',\n                data: {}\n            };\n            let msg = null;\n            // 验证信息的正确性\n            if ([email, password, captcha].some(item => {\n                return item === '';\n            })) {\n                msg = '信息不完整。';\n            } else if (!validator.isEmail(email)) {\n                msg = '邮箱不合法。';\n            } else if (password.length < 6) {\n                msg = '密码不能小于5。';\n            }\n            // END 验证信息的正确性\n\n            if (msg != null) {\n                ctx.status = 422;\n                ret.message = msg;\n                ctx.body = ret;\n                return;\n            }\n            // todo 验证码校验\n\n\n            const accounts = await service.account.getUsersByQuery({\n                $or: [\n                    { email }\n                ]\n            }, {});\n\n            if (accounts.length > 0) {\n                ctx.status = 422;\n                ret.message = '用户名或邮箱已被使用。';\n                ctx.body = ret;\n                return;\n            }\n\n            const passhash = ctx.helper.bhash(password);\n\n\n            let result = await service.account.newAndSave(email, passhash, false);\n\n            console.log(result);\n            // 发送激活邮件\n            await service.mail.sendActiveMail(email, utility.md5(email + passhash + config.session_secret));\n            ret.status = 200;\n            ctx.body = ret;\n        }\n\n\n        async login() {\n            const { ctx, service, config } = this;\n\n\n            const email = validator.trim(ctx.request.body.email || '').toLowerCase();\n            const password = validator.trim(ctx.request.body.password || '');\n            // const captcha = validator.trim(String(ctx.request.body.captcha) || '');\n\n            console.log(ctx.request.body);\n            const ret = {\n                status: 422,\n                message: '',\n                data: {}\n            };\n            let msg = null;\n            // 验证信息的正确性\n            if ([email, password].some(item => {\n                return item === '';\n            })) {\n                msg = '信息不完整。';\n            } else if (!validator.isEmail(email)) {\n                msg = '邮箱不合法。';\n            } else if (password.length < 6) {\n                msg = '密码不能小于6。';\n            }\n\n            const getUser = email => {\n                if (email.indexOf('@') > 0) {\n                    return ctx.service.user.getUserByMail(email);\n                }\n                return false;\n            };\n            const existUser = await getUser(email);\n\n            // 用户不存在\n            if (!existUser) {\n                ctx.status = 422;\n                ret.message = '用户不存在';\n                ctx.body = ret;\n                return;\n            }\n\n            const passhash = existUser.pass;\n            // TODO: change to async compare\n            const equal = ctx.helper.bcompare(password, passhash);\n            // 密码不匹配\n            if (!equal) {\n                ctx.status = 422;\n                ret.message = '密码不正确';\n                ctx.body = ret;\n                return;\n            }\n\n            const token = app.jwt.sign({ email: existUser.email }, app.config.jwt.secret);\n\n\n            ret.status = 200;\n            ret.data.token = token;\n            ctx.body = ret;\n        }\n\n\n        async test() {\n            const { ctx } = this;\n\n            console.log(ctx.account);\n\n            this.ctx.body = ctx.user;\n        }\n\n\n\n        async forget() {\n            const { ctx, service } = this;\n            const ret = {\n                status: 422,\n                message: '',\n                data: {}\n            };\n            const email = validator.trim(ctx.request.body.email).toLowerCase();\n            const password = validator.trim(ctx.request.body.password) || '';\n\n            if (!validator.isEmail(email)) {\n\n                ret.message = '邮箱不合法';\n                ctx.body = ret;\n                return;\n            }\n\n            const user = await service.user.getUserByMail(email);\n            if (!user) {\n                ret.message = '邮箱不存在';\n                ctx.body = ret;\n                return;\n\n            }\n\n            const passhash = ctx.helper.bhash(password);\n            user.pass = passhash;\n            await user.save();\n            ctx.status = 200;\n            ret.status = 200;\n            ctx.body = ret;\n\n        }\n        // 修改密码\n        async updatePass() {\n            const { ctx, service } = this;\n            const ret = {\n                status: 422,\n                message: '',\n                data: {}\n            };\n            const old_password = validator.trim(ctx.request.body.old_password) || '';\n            const password = validator.trim(ctx.request.body.password) || '';\n\n            const user = await service.account.getUserByMail(ctx.account.email);\n\n            if (!user) {\n                ret.message = '用户不存在';\n                ctx.body = ret;\n                return;\n\n            }\n            const equal = ctx.helper.bcompare(old_password, user.pass);\n            // 密码不匹配\n            if (!equal) {\n                ctx.status = 422;\n                ret.message = '旧密码不正确';\n                ctx.body = ret;\n                return;\n            }\n\n            const passhash = ctx.helper.bhash(password);\n            user.pass = passhash;\n\n            await user.save();\n            ctx.status = 200;\n            ret.status = 200;\n            ctx.body = ret;\n        }\n\n    }\n\n    return AccountController;\n};"]}